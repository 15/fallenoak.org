---
import Navbar from "../components/Navbar.astro";
// import { ViewTransitions } from "astro:transitions";
import { getImage } from "astro:assets";
const { title } = Astro.props;

const { pathname } = Astro.url;
---

<!doctype html>
<html lang="en">
  <head>
    <link rel="icon" href="/favicon.png" />
    <meta charset="UTF-8" />
    <meta property="og:title" content="Fallen Oak Equine Rescue" />
    <meta
      property="og:description"
      content="Welcome to Fallen Oak Equine Rescue!"
    />
    <meta property="og:image" content="/fallenoak.png" />
    <meta property="og:image:width" content="1987" />
    <meta property="og:image:height" content="699" />
    <meta property="og:url" content="https://fallenoak.org" />
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content="Fallen Oak Equine Rescue" />
    <meta property="og:image:alt" content="Fallen Oak Equine Rescue logo" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="Fallen Oak Equine Rescue" />
    <meta
      name="twitter:description"
      content="Welcome to Fallen Oak Equine Rescue!"
    />
    <meta name="twitter:image" content="/fallenoak.png" />
    <meta name="description" content="Welcome to Fallen Oak Equine Rescue!" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <!-- <ViewTransitions /> -->

    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700"
      rel="stylesheet"
    />
  </head>
  <body>
    <div>
      <Navbar />
      <!-- <div class="threshold" style="top: 10%"></div>
		<div class="threshold" style="bottom: 50%"></div> -->
      <slot />
    </div>
    <style is:global>
      html.lenis {
        height: auto;
      }

      .lenis.lenis-smooth {
        scroll-behavior: auto !important;
      }

      .lenis.lenis-smooth [data-lenis-prevent] {
        overscroll-behavior: contain;
      }

      .lenis.lenis-stopped {
        overflow: hidden;
      }

      .lenis.lenis-scrolling iframe {
        pointer-events: none;
      }
    </style>

    <script>
      import { gsap } from "gsap";
      import { ScrollTrigger } from "gsap/ScrollTrigger";
      import Lenis from "lenis";

        gsap.registerPlugin(ScrollTrigger);
        const lenis = new Lenis({
          content: document.querySelector(".wrapper"),
          duration: 1.2,
          easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),
        });

        window.lenis = lenis;

        const raf = (t) => {
          lenis.raf(t);
          lenis.resize();
          ScrollTrigger.update();
          requestAnimationFrame(raf);
        };
        requestAnimationFrame(raf);

        gsap.set(".panel", {
          zIndex: (i, target, targets) => targets.length - i,
        });

        const images = gsap.utils.toArray(".panel:not(.purple)");

        images.forEach((image, i) => {
          const tl = gsap.timeline({
            scrollTrigger: {
              trigger: "section.black",
              start: () => "top -" + window.innerHeight * (i + 0.5),
              end: () => "+=" + window.innerHeight,
              scrub: true,
              toggleActions: "play none reverse none",
              invalidateOnRefresh: true,
            },
          });

          tl.to(image, { height: 0 });
        });

        gsap.set(".panel-text", {
          zIndex: (i, target, targets) => targets.length - i,
        });

        const texts = gsap.utils.toArray(".panel-text");

        texts.forEach((text, i) => {
          const tl = gsap.timeline({
            scrollTrigger: {
              trigger: "section.black",
              start: () => "top -" + window.innerHeight * i,
              end: () => "+=" + window.innerHeight,
              scrub: true,
              toggleActions: "play none reverse none",
              invalidateOnRefresh: true,
            },
          });

          tl.to(text, { duration: 0.33, opacity: 1, y: "50%" }).to(
            text,
            { duration: 0.33, opacity: 0, y: "0%" },
            0.66
          );
        });

        ScrollTrigger.create({
          trigger: "section.black",
          scrub: true,
          markers: false,
          pin: true,
          start: () => "top top",
          end: () => "+=" + (images.length + 1) * window.innerHeight,
          invalidateOnRefresh: true,
        });

        gsap.utils.toArray(".comparisonSection").forEach((section) => {
          const tl = gsap.timeline({
            scrollTrigger: {
              trigger: section,
              start: "center center",
              // makes the height of the scrolling (while pinning) match the width, thus the speed remains constant (vertical/horizontal)
              end: () => "+=" + section.offsetWidth,
              scrub: true,
              pin: true,
              anticipatePin: 1,
            },
            defaults: { ease: "none" },
          });
          // animate the container one way...
          tl.fromTo(
            section.querySelector(".afterImage"),
            { xPercent: -100, x: 0 },
            { xPercent: 0 }
          )
            // ...and the image the opposite way (at the same time)
            .fromTo(
              section.querySelector(".afterImage img"),
              { xPercent: 100, x: 0 },
              { xPercent: 0 },
              0
            );
        });

        const horizontalSections = gsap.utils.toArray("div.horizontal");

        horizontalSections.forEach(function (sec, i) {
          const thisPinWrap = sec.querySelector(".pin-wrap");
          const thisAnimWrap = thisPinWrap.querySelector(".animation-wrap");

          const getToValue = () =>
            -(thisAnimWrap.scrollWidth - window.innerWidth);

          gsap.fromTo(
            thisAnimWrap,
            {
              x: () =>
                thisAnimWrap.classList.contains("to-right") ? 0 : getToValue(),
            },
            {
              x: () =>
                thisAnimWrap.classList.contains("to-right") ? getToValue() : 0,
              ease: "none",
              scrollTrigger: {
                trigger: sec,
                start: "top top",
                end: () =>
                  "+=" + (thisAnimWrap.scrollWidth - window.innerWidth),
                pin: thisPinWrap,
                invalidateOnRefresh: true,
                //anticipatePin: 1,
                scrub: true,
                //markers: true,
              },
            }
          );
        });
    </script>
  </body>
</html>
